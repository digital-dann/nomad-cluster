- name: Create Certificate Authority
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Set Parameters
      set_fact:
        external_domain: 'domain.com'
        internal_domain: 'home.domain.com'
        ip_addresses:
          - '10.0.3.101'
          - '10.0.3.102'
          - '10.0.3.103'

    - name: Create ./certs directory if it does not exist
      file:
        path: ./certs
        state: directory
        mode: '0755'

    - name: Generate Script for Root CA
      copy:
        dest: ./renew-certs.sh
        content: |
          #!/bin/bash
          if [[ ! -f ./root.key ]]; then
            openssl genrsa -out ./certs/root.key 4096
          fi
          if [[ ! -f ./root.crt ]]; then
            export SERIAL_ROOT=0x$(date +%s%N | openssl dgst -sha256 -r | cut -c1-40)
            openssl req -config root.conf -key ./certs/root.key -new -x509 -out ./certs/root.crt -days 18263 -set_serial $SERIAL_ROOT
          fi
          if [[ ! -f ./int.key ]]; then
            openssl genrsa -out ./certs/int.key 4096
          fi
          if [[ ! -f ./int.crt ]]; then
            export SERIAL_INT=0x$(date +%s%N | openssl dgst -sha256 -r | cut -c1-40)
            openssl req -config int.conf -new -sha256 -key ./certs/int.key -out int.csr
            openssl x509 -req -days 10958 -in int.csr -CA ./certs/root.crt -CAkey ./certs/root.key -out ./certs/int.crt -sha256 -set_serial $SERIAL_INT -extfile int.ext
          fi
          if [[ ! -f ./wildcard.key ]]; then
            openssl genrsa -out ./certs/wildcard.key 2048
          fi
          export SERIAL_WILDCARD=0x$(date +%s%N | openssl dgst -sha256 -r | cut -c1-40)
          openssl req -key ./certs/wildcard.key -new -sha256 -out wildcard.csr -subj "/CN=Wildcard"
          openssl x509 -req -days 398 -in wildcard.csr -CA ./certs/int.crt -CAkey ./certs/int.key -out ./certs/wildcard.crt -sha256 -set_serial $SERIAL_WILDCARD -extfile wildcard.ext
          cat ./certs/wildcard.crt > ./certs/wildcard.pem
          cat ./certs/int.crt >> ./certs/wildcard.pem
          cat ./certs/root.crt >> ./certs/wildcard.pem
        mode: '0700'

    - name: Generate root.conf
      copy:
        dest: ./root.conf
        content: |
          [ req ]
          prompt                  = no
          encrypt_key             = no
          default_md              = sha256
          distinguished_name      = dn
          x509_extensions         = ext

          [ dn ]
          commonName              = Private Root CA

          [ ext ]
          basicConstraints        = critical, CA:TRUE, pathlen:1
          keyUsage                = critical, keyCertSign, cRLSign
          subjectKeyIdentifier    = hash
          authorityKeyIdentifier  = keyid:always, issuer

    - name: Generate int.conf
      copy:
        dest: ./int.conf
        content: |
          [ req ]
          prompt                  = no
          encrypt_key             = no
          default_md              = sha256
          distinguished_name      = dn
          x509_extensions         = ext

          [ dn ]
          commonName              = Private Intermediate CA

          [ ext ]
          basicConstraints        = critical, CA:TRUE, pathlen:0
          keyUsage                = critical, keyCertSign, cRLSign
          subjectKeyIdentifier    = hash
          authorityKeyIdentifier  = keyid:always, issuer

    - name: Generate int.ext
      copy:
        dest: ./int.ext
        content: |
          basicConstraints        = critical, CA:TRUE, pathlen:0
          keyUsage                = critical, keyCertSign, cRLSign
          subjectKeyIdentifier    = hash
          authorityKeyIdentifier  = keyid:always, issuer

    - name: Generate wildcard.ext
      copy:
        dest: ./wildcard.ext
        content: |
          keyUsage                = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
          extendedKeyUsage        = critical, serverAuth
          subjectAltName          = DNS:*.service.consul

    - name: Create SAN value
      set_fact:
        san_list: "DNS:*.service.consul,DNS:*.{{ internal_domain }},IP:{{ ip_addresses | join(',IP:') }}"

    - name: update Wildcard extension
      lineinfile:
        path: ./wildcard.ext
        regexp: 'subjectAltName'
        line: "subjectAltName          = {{ san_list }}"

    - name: Create Certificates
      shell: bash renew-certs.sh
      args:
        warn: false
