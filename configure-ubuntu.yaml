- name: Configure
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Update apt repo and cache
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Upgrade all packages
      apt:
        upgrade: 'yes'
        force_apt_get: yes


    - name: Gather hostname
      shell: hostname
      register: hostname
      
    - name: Gather current username
      user:
        name: "{{ ansible_facts['env']['SUDO_USER'] }}"
      register: username
      changed_when: False


    - name: Update sudo config
      lineinfile:
        path: "/etc/sudoers.d/{{ username.name }}"
        regexp: "^{{ username.name }}"
        line: "{{ username.name }} ALL=(ALL:ALL) NOPASSWD:ALL"
        create: true

    - name: Install packages
      apt:
        name:
          - apt-transport-https
          - jq
          - bash
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - chrony
          - zip
          - unzip
          - openssl
          - net-tools
          - tcpdump
          - telnet
          - nano
          - gnupg
          - lsb-release
          - sshfs
          - wget
          - tar
          - rsync
          - rename
          - bridge-utils
        state: present
        force_apt_get: yes

    - name: Remove packages
      apt:
        name:
          - ufw
          - mdadm
          - open-iscsi
          - lxd
          - lxd-client
          - lxcfs
          - liblxc-common
          - popularity-contest
          - ubuntu-standard
          - ubuntu-adcantage-tools
          - landscape-common
        state: absent
        autoremove: yes
        force_apt_get: yes


    - name: Check for docker gpg key
      stat:
        path: /usr/share/keyrings/docker-archive-keyring.gpg
      register: docker_gpg_key

    - name: Install docker gpg key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      when: not docker_gpg_key.stat.exists
      args:
        warn: false

    - name: Check for docker repo source definition
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_src_list

    - name: Add Docker Repository
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: not docker_src_list.stat.exists
      args:
        warn: false

    - name: Update apt and install docker-ce
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        force_apt_get: yes

    - name: Create '/etc/docker'
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker logging limits
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "10"
            }
          }
      register: docker_daemon_json

    - name: Restart Docker to apply new config
      shell: systemctl restart docker
      when: docker_daemon_json.changed
      args:
        warn: false

    - name: Get Docker compose version (latest release)
      uri:
        url: https://github.com/docker/compose/releases/latest
      register: latest_compose

    - name: Download Docker compose module (latest release)
      get_url:
        url: "{{ latest_compose.url | replace('/tag/','/download/') }}/docker-compose-linux-x86_64"
        dest: /usr/libexec/docker/cli-plugins/docker-compose
        mode: '755'

    - name: Create /docker
      file:
        path: /docker
        state: directory
        mode: '0755'


    - name: Enable separate cron logging
      lineinfile:
        path: /etc/rsyslog.d/50-default.conf
        regexp: '^#cron.*'
        line: 'cron.*				/var/log/cron.log'
      register: cron_log_config

    - name: Reload rsyslog daemon configurations
      shell: systemctl restart rsyslog.service
      when: cron_log_config.changed


    - name: Link bash envs file (user)
      become: yes
      become_user: "{{ username.name }}"
      lineinfile:
        path: ~/.bashrc
        regexp: '^if [ -f ~/.bash_envs ]; then . ~/.bash_envs; fi$'
        line: 'if [ -f ~/.bash_envs ]; then . ~/.bash_envs; fi'

    - name: Create (if necessary) '~/.bash_envs' (user)
      become: yes
      become_user: "{{ username.name }}"
      file:
        path: ~/.bash_envs
        state: touch
        mode: '0644'

    - name: Add color prompts to '~/.bash_envs' (user)
      become: yes
      become_user: "{{ username.name }}"
      lineinfile:
        path: ~/.bash_envs
        regexp: '^PS1='
        line: 'PS1="\n\[\033[00;97m\][\[\033[0;32m\]\u@\h\[\033[00;97m\]:\[\033[1;33m\]\w\[\033[00;97m\]]\[\033[0m\]\n\$ "'


    - name: Link bash envs file (root)
      lineinfile:
        path: ~/.bashrc
        regexp: '^if [ -f ~/.bash_envs ]; then . ~/.bash_envs; fi$'
        line: 'if [ -f ~/.bash_envs ]; then . ~/.bash_envs; fi'

    - name: Create (if necessary) '~/.bash_envs' (root)
      file:
        path: ~/.bash_envs
        state: touch
        mode: '0644'

    - name: Add color prompts to '~/.bash_envs' (root)
      lineinfile:
        path: ~/.bash_envs
        regexp: '^PS1='
        line: 'PS1="\n\[\033[00;97m\][\[\033[0;32m\]\u@\h\[\033[00;97m\]:\[\033[1;33m\]\w\[\033[00;97m\]]\[\033[0m\]\n\$ "'


    - name: Create app interface systemd unit file
      copy:
        dest: /etc/systemd/system/appif.service
        content: |
          [Unit]
          Description=Service to bring up/down app interface
          After=network.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/bin/sh -c "/sbin/ip link add name app type dummy 2> /dev/null || true; \
                    /sbin/ip addr add 169.254.254.254/24 dev app; \
                    /sbin/ip link set app up 2> /dev/null || true"
          ExecStop=/sbin/ip link set app down

          [Install]
          WantedBy=multi-user.target
        mode: '0444'
      register: appif_service
    - name: Reload system daemon configurations
      shell: systemctl daemon-reload
      when: appif_service.changed
    - name: Enable app interface service
      shell: systemctl enable appif
      when: appif_service.changed
    - name: Enable app interface service
      shell: systemctl start appif
      when: appif_service.changed


    - name: Check for hashicorp gpg key
      stat:
        path: /usr/share/keyrings/hashicorp-archive-keyring.gpg
      register: hashicorp_gpg_key

    - name: Install hashicorp gpg key
      shell: curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      when: not hashicorp_gpg_key.stat.exists
      args:
        warn: false

    - name: Check for hashicorp repo source definition
      stat:
        path: /etc/apt/sources.list.d/hashicorp.list
      register: hashicorp_src_list

    - name: Add hashicorp Repository
      shell:
        cmd: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
      when: not hashicorp_src_list.stat.exists


    - name: Add glusterfs Repository
      apt_repository:
        repo: ppa:gluster/glusterfs-11
        state: present


    - name: Disabled local resolver
      lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: 'DNSStubListener='
        line: 'DNSStubListener=no'

    - name: Restart resolved service to to apply new config
      shell: systemctl restart systemd-resolved
      args:
        warn: false


    - name: Configure networking for node
      copy:
        dest: /etc/netplan/00-installer-config.yaml
        content: |
          network:
            ethernets:
              {{ ansible_default_ipv4.interface }}:
                dhcp4: no
                dhcp6: no
                addresses: [10.0.1.101/22]
                gateway4: 10.0.0.1
                nameservers:
                  addresses: [10.0.0.1]
            version: 2
      when: hostname.stdout == "node0"
      register: network_config


    - name: Apply new network config
      shell: netplan apply
      when: network_config.changed
